// all_programs_1_to_36.c
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

int isPrime(int n){
    if(n < 2) return 0;
    for(int i=2;i*i<=n;i++) if(n%i==0) return 0;
    return 1;
}

void option1(){ for(int i=1;i<=10;i++) printf("%d ", i); printf("\n"); }
void option2(){ for(int i=1;i<=10;i++) printf("%d ", 2*i-1); printf("\n"); }
void option3(){ for(int i=1;i<=10;i++) printf("%d ", 2*i); printf("\n"); }
void option4(){ int n; scanf("%d",&n); for(int i=1;i<=n;i++) printf("%d ", i); printf("\n"); }
void option5(){ int n; scanf("%d",&n); for(int i=1;i<=n;i++) printf("%d ", 2*i-1); printf("\n"); }
void option6(){ int n; scanf("%d",&n); for(int i=1;i<=n;i++) printf("%d ", 2*i); printf("\n"); }
void option7(){ int n,sum=0; scanf("%d",&n); for(int i=1;i<=n;i++) sum+=i; printf("Sum=%d\n", sum); }
void option8(){ float d; scanf("%f",&d); printf("Rs=%.2f\n",d*48); }
void option9(){ float rs; scanf("%f",&rs); printf("Dollar=%.2f\n",rs/48); }
void option10(){ float d; scanf("%f",&d); printf("Pound=%.2f\n",(d*48)/70); }
void option11(){ float g; scanf("%f",&g); printf("Kg=%.3f\n",g/1000); }
void option12(){ float kg; scanf("%f",&kg); printf("Grams=%.2f\n",kg*1000); }
void option13(){ long b; scanf("%ld",&b); printf("KB=%.2f MB=%.2f GB=%.6f\n",b/1024.0,b/(1024.0*1024),b/(1024.0*1024*1024)); }
void option14(){ float c; scanf("%f",&c); printf("F=%.2f\n",(9.0/5)*c+32); }
void option15(){ float f; scanf("%f",&f); printf("C=%.2f\n",(f-32)*5.0/9); }
void option16(){ float P,R,N; scanf("%f%f%f",&P,&R,&N); printf("I=%.2f\n",(P*R*N)/100); }
void option17(){ float L; scanf("%f",&L); printf("Area=%.2f Peri=%.2f\n",L*L,4*L); }
void option18(){ float L,B; scanf("%f%f",&L,&B); printf("Area=%.2f Peri=%.2f\n",L*B,2*(L+B)); }
void option19(){ float R; scanf("%f",&R); printf("Area=%.2f\n",(22/7.0)*R*R); }
void option20(){ float H,B; scanf("%f%f",&H,&B); printf("Area=%.2f\n",(H*B)/2); }
void option21(){ float g; scanf("%f",&g); printf("Net=%.2f\n",g+0.1*g-0.03*g); }
void option22(){ float g; scanf("%f",&g); printf("NetSales=%.2f\n",g-0.1*g); }
void option23(){ float a,b,c; scanf("%f%f%f",&a,&b,&c); float t=a+b+c; printf("Total=%.2f Avg=%.2f\n",t,t/3); }
void option24(){ int a,b; scanf("%d%d",&a,&b); int t=a;a=b;b=t; printf("a=%d b=%d\n",a,b); }
void option25(){ int n; scanf("%d",&n); int t=n,r=0; while(t){r=r*10+t%10;t/=10;} if(r==n) printf("Palindrome\n"); else printf("Not\n"); }
void option26(){ int n; scanf("%d",&n); int t=n,d=0; while(t){d++;t/=10;} t=n; int s=0; while(t){s+=pow(t%10,d);t/=10;} if(s==n) printf("Armstrong\n"); else printf("Not\n"); }
void option27(){ int n; scanf("%d",&n); for(int i=1;i<=n;i++) if(n%i==0) printf("%d ",i); printf("\n"); }
void option28(){ int n; scanf("%d",&n); int s=0; for(int i=1;i<n;i++) if(n%i==0) s+=i; if(s==n) printf("Perfect\n"); else printf("Not\n"); }
void option29(){ int n; scanf("%d",&n); if(isPrime(n)) printf("Prime\n"); else printf("Not\n"); }
void option30(){ for(int i=2;i<=500;i++) if(isPrime(i)) printf("%d ",i); printf("\n"); }
void option31(){ int s=0; for(int i=2;i<=500;i++) if(isPrime(i)) s+=i; printf("Sum=%d\n",s); }
void option32(){ int c=0; for(int i=2;i<=500;i++) if(isPrime(i)) c++; printf("Count=%d\n",c); }
void option33(){ int n; scanf("%d",&n); int sq=n*n,t=n; int ok=1; while(t){ if(t%10!=sq%10) ok=0; t/=10; sq/=10; } if(ok) printf("Automorphic\n"); else printf("Not\n"); }
void option34(){ int n; scanf("%d",&n); int a=0,b=1,c; if(n>=1) printf("%d ",a); if(n>=2) printf("%d ",b); for(int i=3;i<=n;i++){ c=a+b; printf("%d ",c); a=b;b=c; } printf("\n"); }
void option35(){ for(int i=1;i<=3;i++){ for(int j=1;j<=i;j++) printf("%d %d ",i,j); printf("\n"); } }
void option36(){ for(int i=1;i<=5;i++) printf("%d %d\n",i,6-i); }

int main(){
    while(1){
        int opt;
        printf("\nEnter option (1-36, 0 exit): ");
        if(scanf("%d",&opt)!=1) break;
        switch(opt){
            case 0: exit(0);
            case 1: option1(); break; case 2: option2(); break; case 3: option3(); break;
            case 4: option4(); break; case 5: option5(); break; case 6: option6(); break;
            case 7: option7(); break; case 8: option8(); break; case 9: option9(); break;
            case 10: option10(); break; case 11: option11(); break; case 12: option12(); break;
            case 13: option13(); break; case 14: option14(); break; case 15: option15(); break;
            case 16: option16(); break; case 17: option17(); break; case 18: option18(); break;
            case 19: option19(); break; case 20: option20(); break; case 21: option21(); break;
            case 22: option22(); break; case 23: option23(); break; case 24: option24(); break;
            case 25: option25(); break; case 26: option26(); break; case 27: option27(); break;
            case 28: option28(); break; case 29: option29(); break; case 30: option30(); break;
            case 31: option31(); break; case 32: option32(); break; case 33: option33(); break;
            case 34: option34(); break; case 35: option35(); break; case 36: option36(); break;
            default: printf("Invalid\n");
        }
    }
    return 0;
}
